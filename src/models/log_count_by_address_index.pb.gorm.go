// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: log_count_by_address_index.proto

package models

import (
	context "context"
	fmt "fmt"
	
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	math "math"

	gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm1 "github.com/jinzhu/gorm"
	field_mask1 "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type LogCountByAddressIndexORM struct {
	LogIndex        uint64 `gorm:"primary_key"`
	TransactionHash string `gorm:"primary_key"`
}

// TableName overrides the default tablename generated by GORM
func (LogCountByAddressIndexORM) TableName() string {
	return "log_count_by_address_indices"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *LogCountByAddressIndex) ToORM(ctx context.Context) (LogCountByAddressIndexORM, error) {
	to := LogCountByAddressIndexORM{}
	var err error
	if prehook, ok := interface{}(m).(LogCountByAddressIndexWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.TransactionHash = m.TransactionHash
	to.LogIndex = m.LogIndex
	if posthook, ok := interface{}(m).(LogCountByAddressIndexWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *LogCountByAddressIndexORM) ToPB(ctx context.Context) (LogCountByAddressIndex, error) {
	to := LogCountByAddressIndex{}
	var err error
	if prehook, ok := interface{}(m).(LogCountByAddressIndexWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.TransactionHash = m.TransactionHash
	to.LogIndex = m.LogIndex
	if posthook, ok := interface{}(m).(LogCountByAddressIndexWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type LogCountByAddressIndex the arg will be the target, the caller the one being converted from

// LogCountByAddressIndexBeforeToORM called before default ToORM code
type LogCountByAddressIndexWithBeforeToORM interface {
	BeforeToORM(context.Context, *LogCountByAddressIndexORM) error
}

// LogCountByAddressIndexAfterToORM called after default ToORM code
type LogCountByAddressIndexWithAfterToORM interface {
	AfterToORM(context.Context, *LogCountByAddressIndexORM) error
}

// LogCountByAddressIndexBeforeToPB called before default ToPB code
type LogCountByAddressIndexWithBeforeToPB interface {
	BeforeToPB(context.Context, *LogCountByAddressIndex) error
}

// LogCountByAddressIndexAfterToPB called after default ToPB code
type LogCountByAddressIndexWithAfterToPB interface {
	AfterToPB(context.Context, *LogCountByAddressIndex) error
}

// DefaultCreateLogCountByAddressIndex executes a basic gorm create call
func DefaultCreateLogCountByAddressIndex(ctx context.Context, in *LogCountByAddressIndex, db *gorm1.DB) (*LogCountByAddressIndex, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LogCountByAddressIndexORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LogCountByAddressIndexORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type LogCountByAddressIndexORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type LogCountByAddressIndexORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultApplyFieldMaskLogCountByAddressIndex patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskLogCountByAddressIndex(ctx context.Context, patchee *LogCountByAddressIndex, patcher *LogCountByAddressIndex, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*LogCountByAddressIndex, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"TransactionHash" {
			patchee.TransactionHash = patcher.TransactionHash
			continue
		}
		if f == prefix+"LogIndex" {
			patchee.LogIndex = patcher.LogIndex
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListLogCountByAddressIndex executes a gorm list call
func DefaultListLogCountByAddressIndex(ctx context.Context, db *gorm1.DB) ([]*LogCountByAddressIndex, error) {
	in := LogCountByAddressIndex{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LogCountByAddressIndexORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &LogCountByAddressIndexORM{}, &LogCountByAddressIndex{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LogCountByAddressIndexORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("transaction_hash")
	ormResponse := []LogCountByAddressIndexORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LogCountByAddressIndexORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*LogCountByAddressIndex{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type LogCountByAddressIndexORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type LogCountByAddressIndexORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type LogCountByAddressIndexORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]LogCountByAddressIndexORM) error
}
